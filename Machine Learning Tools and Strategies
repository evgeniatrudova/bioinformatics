_________________________________________________
Machine Learning
_________________________________________________
Formulate a Question
Find- Grow- Develop Data
Understand Data
Clean Data 
Group Data
Formulate Analysis Question
Choose a Model Strategy
Choose Algorithm
Choose general model ( Supervised Learning / Unsupervised Learning)
Choose general model specific method
Analyse small scale
Analyse large scale
Tune and test 
Evaluate Model
Statistical Validation  
Present Results
_________________________________________________

​Linear Regression. 
_________________________________________________
Euclidean Distance (Euclidean Distance .euclidean())
Is the most commonly used distance formula.
To find the Euclidean distance between two points, we first calculate 
the squared distance between each dimension. If we add up all of
these squared differences and take the square root, we’ve computed
the Euclidean distance.

def euclidean_distance(pt1, pt2):
  distance = 0
  for i in range(len(pt1)):
    distance += (pt1[i] - pt2[i]) ** 2
  return distance ** 0.5

print(euclidean_distance([1, 2], [4, 0]))
print(euclidean_distance([5, 4, 3], [1, 7, 9]))


Manhattan Distance (.cityblock())
Is extremely similar to Euclidean distance. 
Rather than summing the squared difference between each dimension,
we instead sum the absolute value of the difference between each dimension. 
It’s called Manhattan distance because it’s similar to how you might navigate
when walking city blocks. If you’ve ever wondered “how many blocks will it 
take me to get from point A to point B”, you’ve computed the Manhattan distance.

def euclidean_distance(pt1, pt2):
  distance = 0
  for i in range(len(pt1)):
    distance += (pt1[i] - pt2[i]) ** 2
  return distance ** 0.5

def manhattan_distance(pt1, pt2):
  distance = 0
  for i in range(len(pt1)):
    distance += abs(pt1[i] - pt2[i])
  return distance

print(euclidean_distance([1, 2], [4, 0]))
print(euclidean_distance([5, 4, 3], [1, 7, 9]))
print(manhattan_distance([1, 2], [4, 0]))
print(manhattan_distance([5, 4, 3], [1, 7, 9]))

Hamming Distance (.hamming())
Is another slightly different variation on the distance formula. 
Instead of finding the difference of each dimension, Hamming distance only cares 
about whether the dimensions are exactly equal. When finding the Hamming distance
between two points, add one for every dimension that has different values.

Hamming distance is used in spell checking algorithms. For example, the Hamming 
distance between the word “there” and the typo “thete” is one. Each letter is a
dimension, and each dimension has the same value except for one.

def euclidean_distance(pt1, pt2):
  distance = 0
  for i in range(len(pt1)):
    distance += (pt1[i] - pt2[i]) ** 2
  return distance ** 0.5

def manhattan_distance(pt1, pt2):
  distance = 0
  for i in range(len(pt1)):
    distance += abs(pt1[i] - pt2[i])
  return distance

def hamming_distance(pt1, pt2):
  distance = 0
  for i in range(len(pt1)):
    if pt1[i] != pt2[i]:
      distance += 1
  return distance

print(hamming_distance([1, 2], [1, 100]))
print(hamming_distance([5, 4, 9], [1, 7, 9]))

